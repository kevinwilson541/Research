#!/usr/bin/python

from sage.all import var, PolynomialRing
from sage.rings.finite_rings.integer_mod_ring import Integers

cdef int invert(int x, int p):
    x %= p
    cdef tuple curr = (0,1)
    cdef tuple prev = (1,0)
    cdef int q = p / x
    cdef int r = p % x
    cdef int u = p
    cdef int v = x
    while r != 0:
        prev, curr = curr, (prev[0] - q*curr[0], prev[1] - q*curr[1])
        u, v = v, r
        q = u / v
        r = u % v
    return curr[1] % p 

cdef class ModPoly:
    cdef public int __mod
    cdef public dict __valTable
    cdef public dict __coeffs
    cdef public dict __partials
    cdef public dict __variable_names
    def __init__(self, mod, coeffs=dict([((0,0,0), 0)]), poly=None):
        self.__mod = mod
        self.__valTable = dict()
        # define from polynomial
        if poly:
            self.from_polynomial(poly)
        # define from coefficient dictionary
        else:
            self.__coeffs = coeffs
            self.__variable_names = {bytes('x'+str(i)): i for i in xrange(len(coeffs.keys()[0]))}
            self.__initialize()

    def __dealloc__(self):
        del self.__partials
        del self.__coeffs
        del self.__valTable
            
    cpdef dict coefficients(self):
        return self.__coeffs

    cpdef dict table(self):
        return self.__valTable

    cpdef int modulus(self):
        return self.__mod

    cpdef tuple variable_names(self):
        return tuple(sorted(self.__variable_names.keys()))

    cdef __initialize(self):
        cdef list keys = [tuple(key) for key in self.__coeffs.keys()]
        cdef tuple elem
        cdef tuple newKey
        cdef dict aux = dict()

        """
        do reduction of powers in coeffs:
            1. if part of elem is nonzero and reduces to 0, then bump
            to self.__mod-1 so that we preserve behavior at x||y||z=0
            2. add to new set of coeffs, and redefine self.__coeffs
        """
        for elem in keys:
            newKey = tuple([elem[i]%(self.__mod-1) if elem[i]==0 or elem[i]%(self.__mod-1)!=0 else self.__mod-1 for i in xrange(len(self.__variable_names))])
            if not aux.has_key(newKey):
                aux[newKey] = self.__coeffs[elem]
            else:
                aux[newKey] += self.__coeffs[elem]
            del self.__coeffs[elem]
        self.__coeffs = aux
        del aux

        self.__generateValues(self.__valTable, self.__coeffs)
        self.__partials = {key: {} for key in self.__variable_names}
        cdef bytes part
        for part in self.__partials:
            self.__generatePartial(part)

    cdef __generateValues(self, dict valTable, dict coeffs):
        cdef int total = 0
        cdef tuple elem
        """
        for i in xrange(self.__mod):
            for j in xrange(self.__mod):
                for k in xrange(self.__mod):
                    total = 0
                    for elem in coeffs:
                        total += coeffs[elem]*i**elem[0]*j**elem[1]*k**elem[2] % self.__mod
                    valTable[(i,j,k)] = total % self.__mod
        """
        self.__place(valTable, coeffs, [])

    cdef __place(self, dict valTable, dict coeffs, list ls):
        cdef int i
        cdef int total = 0
        cdef int tmp = 1
        cdef tuple elem
        if len(ls) == len(self.__variable_names):
            total = 0
            for elem in coeffs:
                tmp = coeffs[elem]
                for i in xrange(len(elem)):
                    tmp *= ls[i]**elem[i] % self.__mod
                total += tmp
                tmp = 1
            valTable[tuple(ls)] = total % self.__mod
        else:
            for i in xrange(self.__mod):
                ls.append(i)
                self.__place(valTable, coeffs, ls)
                ls.pop()

    cdef __generatePartial(self, bytes var):
        cdef dict coeffs = dict()
        cdef tuple elem
        cdef list tmp
        for elem in self.__coeffs:
            if elem[self.__variable_names[var]] != 0:
                tmp = list(elem)
                tmp[self.__variable_names[var]] -= 1
                coeffs[tuple(tmp)] = elem[self.__variable_names[var]] * self.__coeffs[elem] % self.__mod

        self.__generateValues(self.__partials[var], coeffs)

    cpdef is_zero(self):
        cdef tuple elem
        for elem in self.__valTable:
            if self.__valTable[elem] != 0:
                return False
        return True

    def __add__(self, ModPoly rhs):
        assert self.__mod == rhs.__mod
        cdef dict coeffs = dict()
        cdef tuple elem
        # go through all coeffs in this polynomial
        for elem in self.__coeffs:
            if rhs.__coeffs.has_key(elem):
                coeffs[elem] = (self.__coeffs[elem]+rhs.__coeffs[elem]) % self.__mod
            else:
                coeffs[elem] = self.__coeffs[elem]
        # then iterate through all coeffs in rhs
        for elem in rhs.__coeffs:
            if not coeffs.has_key(elem):
                coeffs[elem] = rhs.__coeffs[elem]
        for elem in coeffs.keys():
            if coeffs[elem] == 0:
                del coeffs[elem]
        return ModPoly(self.__mod, coeffs)

    def __sub__(self, ModPoly rhs):
        assert self.__mod == rhs.__mod
        cdef dict coeffs = dict()
        cdef tuple elem
        # go through all coeffs in this polynomial
        for elem in self.__coeffs:
            if rhs.__coeffs.has_key(elem):
                coeffs[elem] = (self.__coeffs[elem] - rhs.__coeffs[elem]) % self.__mod
            else:
                coeffs[elem] = self.__coeffs[elem]
        # then iterate through all coeffs in rhs
        for elem in rhs.__coeffs:
            if not coeffs.has_key(elem):
                coeffs[elem] = (-1*rhs.__coeffs[elem]) % self.__mod
        for elem in coeffs.keys():
            if coeffs[elem] == 0:
                del coeffs[elem]
        return ModPoly(self.__mod, coeffs)

    def __mul__(self, rhs):
        cdef dict coeffs = dict()
        cdef tuple elem
        rhs = rhs % self.__mod
        for elem in self.__coeffs:
            coeffs[elem] = (self.__coeffs[elem]*rhs) % self.__mod
            if coeffs[elem] % self.__mod == 0:
                del coeffs[elem]
        return ModPoly(self.__mod, coeffs)

    def __div__(self, rhs):
        cdef dict coeffs = dict()
        cdef tuple elem
        rhs = rhs % self.__mod
        for elem in self.__coeffs:
            coeffs[elem] = (self.__coeffs[elem]*invert(rhs, self.__mod)) % self.__mod
            if coeffs[elem] % self.__mod == 0:
                del coeffs[elem]
        return ModPoly(self.__mod, coeffs)

    def __richcmp__(self, ModPoly rhs, int op):
        # cython doesn't allow __eq__, __ne__, so use __richcmp__
        assert self.__mod == rhs.__mod
        if (op == 2):
            return self.__valTable == rhs.__valTable
        elif (op == 3):
            return self.__valTable != rhs.__valTable
        else:
            raise Exception("Can only make equality-based comparisons.")

    def __call__(self, *arg):
        assert len(arg) == len(self.__variable_names)
        ls = [val % self.__mod for val in arg]
        return self.__valTable[tuple(ls)] 

    def __iadd__(self, ModPoly rhs):
        # same deal as __add__, only now we operate on self's value table
        # and coeff table
        assert self.__mod == rhs.__mod
        cdef tuple elem
        for elem in self.__coeffs:
            if rhs.__coeffs.has_key(elem):
                self.__coeffs[elem] += rhs.__coeffs[elem]
                self.__coeffs[elem] %= self.__mod
        for elem in rhs.__coeffs:
            if not self.__coeffs.has_key(elem):
                self.__coeffs[elem] = rhs.__coeffs[elem]
        for key in self.__coeffs.keys():
            if self.__coeffs[key] == 0:
                del self.__coeffs[key]
        
        self.__valTable = dict()
        self.__generateValues(self.__valTable, self.__coeffs)
        cdef bytes part
        for part in self.__partials:
            self.__generatePartial(part)
        return self

    def __isub__(self, ModPoly rhs):
        # same deal as __sub__, only now we operate on self's value table
        # and coeff table
        assert self.__mod == rhs.__mod
        cdef tuple elem
        for elem in self.__coeffs:
            if rhs.__coeffs.has_key(elem):
                self.__coeffs[elem] -= rhs.__coeffs[elem]
                self.__coeffs[elem] %= self.__mod
        for elem in rhs.__coeffs:
            if not self.__coeffs.has_key(elem):
                self.__coeffs[elem] = (-1*rhs.__coeffs[elem]) % self.__mod
        for key in self.__coeffs.keys():
            if self.__coeffs[key] == 0:
                del self.__coeffs[key]
        
        self.__valTable = dict()
        self.__generateValues(self.__valTable, self.__coeffs)
        cdef bytes part
        for part in self.__partials:
            self.__generatePartial(part)
        return self

    def __imul__(self, rhs):
        cdef tuple elem
        rhs = rhs % self.__mod
        for elem in self.__coeffs:
            self.__coeffs[elem] *= rhs
            self.__coeffs[elem] %= self.__mod
        for key in self.__coeffs.keys():
            if self.__coeffs[key] == 0:
                del self.__coeffs[key]

        self.__valTable = dict()
        self.__generateValues(self.__valTable, self.__coeffs)
        cdef bytes part
        for part in self.__partials:
            self.__generatePartial(part)
        return self

    def __idiv__(self, rhs):
        cdef tuple elem
        rhs = rhs % self.__mod
        for elem in self.__coeffs:
            self.__coeffs[elem] *= invert(rhs, self.__mod)
            self.__coeffs[elem] %= self.__mod
        for key in self.__coeffs.keys():
            if self.__coeffs[key] == 0:
                del self.__coeffs[key]

        self.__valTable = dict()
        self.__generateValues(self.__valTable, self.__coeffs)
        cdef bytes part
        for part in self.__partials:
            self.__generatePartial(part)
        return self

    def __hash__(self):
        return str(self.__valTable).__hash__()

    def __str__(self):
        return str(self.polynomial())

    cpdef polynomial(self):
        poly = 0
        cdef tuple elem
        cdef int i
        if len(self.__variable_names) != 1:
            variables = var(sorted([p for p in self.__variable_names]))
        else:
            variables = [var(self.__variable_names.keys()[0])]
            variables = tuple(variables)
        for elem in self.__coeffs:
            tmp = self.__coeffs[elem]
            for i in xrange(len(elem)):
                tmp *= variables[i]**elem[i]
            poly += tmp
        return PolynomialRing(Integers(self.__mod), str(self.__variable_names.keys())[1:-1], len(self.__variable_names))(poly)

    cpdef from_polynomial(self, poly):
        assert getattr(poly, 'dict', None) != None
        self.__mod = poly.base_ring().order()
        poly = poly.parent()(poly)
        variables = poly.parent().variable_names()
        self.__variable_names = {variables[i]: i for i in xrange(len(variables))}
        
        # sage returns its own type of tuple for polynomial dicts, so we
        # convert this tuple to python's tuple for cython tuple use.
        self.__coeffs = dict([(tuple(key[0]), key[1]) for key in poly.dict().items()])
        self.__initialize()
        
    cpdef div(self, bytes var):
        cdef tuple elem
        cdef dict aux = {}
        cdef list newCoeff
        for elem in self.__coeffs.keys():
            if elem[self.__variable_names[var]] != 0:
                newCoeff = list(elem)
                newCoeff[self.__variable_names[var]] -= 1
                aux[tuple(newCoeff)] = self.__coeffs[elem]

            del self.__coeffs[elem]
        self.__coeffs = aux
        
        self.__valTable = dict()
        # generate with coeff table
        self.__generateValues(self.__valTable, self.__coeffs)
        # generate with L'Hopital's rule
        """
        given that we might use a coeff table, this code wouldn't be necessary. However, we can make a subclass
        that is solely based off a value table and just return an instance of that class with the new values
        upon division by x.

        cdef int total = 0
        cdef int i
        cdef int j
        cdef int k
        cdef tuple elem
        for i in xrange(self.__mod):
            for j in xrange(self.__mod):
                for k in xrange(self.__mod):
                    cdef list pnt = (i,j,k) 
                    if pnt[variables[var]] == 0:
                        self.__valTable[pnt] = self.__partials[var][pnt]
                    else:
                        total = 0
                        for elem in coeffs:
                            total += self.__coeffs[elem]*i**elem[0]*j**elem[1]*k**elem[2] % self.__mod
                        self.__valTable[pnt] = total % self.__mod
        """

        cdef bytes part
        for part in self.__partials:
            self.__generatePartial(part)
        return self

